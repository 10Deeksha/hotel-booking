# -*- coding: utf-8 -*-
"""Copy of Final Team Collab-Hotel Booking-EDA-Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m3Dq1sz3t0eEpxdZmZyVnTHKBvWeyn6g

# **Project Name**    - Hotel Booking Analysis

##### **Project Type**    - EDA
##### **Contribution**    - SELF MADE
##### Team Member 1 - DEEKSHA MANDAVI

# **Project Summary -**

##Have you ever wondered when the best time of year to book a hotel room is? Or the optimal length of stay in order to get the best daily rate? What if you wanted to predict whether or not a hotel was likely to receive a disproportionately high number of special requests? This hotel booking dataset can help you explore those questions!

##This data set contains booking information for a city hotel and a resort hotel, and includes information such as when the booking was made, length of stay, the number of adults, children, and/or babies, and the number of available parking spaces, among other things. All personally identifying information has been removed from the data.
##Explore and analyze the data to discover important factors that govern the bookings.

# **GitHub Link -**

# **Problem Statement**

- 1. What is the correlation between the given data?

- 2. Which type of Hotel is mostly prefered by the customers?

- 3. What is the reason for cancellation of bookings?

- 4. Which type of hotel bookings are mostly cancelled?

- 5. Which Year is the most profitable for hotel bookings?

- 6. In which month most hotels were booked?

- 7. When the hotel gets more guest i.e., in weekdays or weekends?

- 8. Which type of hotel is mostly preferred by adults having children or babies?

- 9. What is the booking rate according to the population?

- 10. The maximum number of guests are from which country?

- 11. Which market segment is more profitable for hotel bookings?

- 12. Which form of distribution do customers prefer most?

- 13. What is the number of repeated families in hotel bookings and which type of hotel has more loyal customers?

- 14. Which hotel produces maximum revenue?

- 15. Which room type has highest average daily rate?

- 16. Does a longer waiting period result in cancelled bookings?

- 17. In which month do the hotels have the highest revenue?

#### **Define Your Business Objective?**

By the analysis of the given data we found some useful insights for the business. It will help the business to make more profit and can do improvement in their hotels, marketing schemes, customer interaction, etc. It will also help the buisness to increase the revenue by focusing on the suggested area of improvements.

### Import Libraries
"""

# Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### Dataset Loading"""

# Load Dataset
file_path = '/content/Hotel Bookings.csv'
main_df = pd.read_csv(file_path)

"""### Dataset First View"""

# Dataset First Look
main_df

"""##Data Description
1.	**Hotel** : Different type of Hotels.
2.	**is_canceled** : The value indicates whether or not the reservation has been cancelled.
3.	**lead_time** : How far in advance the reservation was made
4.	**arrival_date_year** : Year of customer arrival.
5.	**arrival_date_month** :Which month of the year did the customer visit
6.	**arrival_date_week_number**: Which week of the year
7.	**arrival_date_day_of_month** :The month in which the customer visited the hotel.
8.	**stays_in_weekend_nights** : Customer stayed or booked to stay in hotel during weekend nights.
9.	**stays_in_week_nights** : The customer stayed or planned to stay in a hotel on a weekend night.
10.	**adults** : Number of adults
11.	**children** : number of children.
12.	**babies** : Number of babies.
13.	**meal** : Type of meal booked.:
14.	**country** : Country of orgin of cutomer.
15.	**market_segment** : where the bookings came from.
16.	**distribution_channel** : Booking distribution channel. The term “TA” means “Travel Agents” and “TO” means “Tour Operators” .
17.	**is_repeated_guest** : Value indicating if the booking name was from a repeated guest (1) or not (0).
18.	**previous_cancellations** : The number of previous bookings that the customer cancelled prior to the current booking.
19.	**previous_bookings_not_canceled** : Number of previous bookings that were cancelled by the customer prior to the current booking.
20.	**reserved_room_type** : The number of previous bookings cancelled by the customer prior to the current booking.
21.	**assigned_room_type** : The code for the room type assigned to the booking. Because of this, the assigned room type may differ from the reserved room type.
22.	**booking_changes**: Number of changes/amendments made to the booking from the moment the booking was entered on the PMS.
23.	**deposit_type** : Indicates whether or not the customer paid a deposit to secure the reservation.
24.	**agent** : The ID of the travel agency that made the reservation.
25.	**company** : ID of the company/entity that made the reservation or is responsible for paying the reservation.
26.	**days_in_waiting_list** : The number of days the reservation was on the waiting list before being confirmed to the customer.
27.	**customer_type** : Booking type, assuming one of four categories.
28.	**adr **: The average daily rate is calculated by dividing the total number of staying nights by the sum of all lodging transactions.
29.	**required_car_parking_spaces** : The number of parking spaces needed by the customer.
30.	**total_of_special_requests **: The number of customer special requests (e.g. twin bed or high floor).
31.	**reservation_status** : Last reservation status in one of three categories: Canceled - the customer cancelled the reservation; Check-out: the customer checked out of the hotel. No show: the customer did not check in to the hotel and informed the hotel of the reason.
32.	**reservation_status_date** : The date on which the most recent status was set. This variable, in conjunction with the Reservation Status, can be used to determine when the booking was cancelled or when the customer checked out of the hotel.

"""

#Detailed informtion of the Dataset
# Dataset info can be done by giving info() as attribute
# we can also say which columns has to be cleaned.
main_df.info()

"""- According to this, we found that there are 119390 rows and 32 columns with the different data types like int64, object, float etc.

- It also gives information about the null values in the data.
"""

# Dataset Describe
main_df.describe().T

# Describe attribute gives us the information about the 'statistical data' for our corresponding columns.
# We use transpose attribute because our columns are large, so tranpose attribute interchanges our rows and columns.

"""## Dataset Rows & Columns count"""

# Dataset Rows & Columns count
# Rows and Columns count means that we need to calculate the shape of the dataset
main_df.shape

"""## Duplicate Values"""

# Dataset Duplicate Value Count
print(main_df.shape)
main_df.duplicated().sum()

"""- Here we find that the total no. of duplicate values in our data is 31,994"""

#We find that there are some duplicates in our data.So We will remove the duplicates.
main_df.drop_duplicates(inplace=True)

"""- So after removing the duplicates from the dataset,our dataset shape has 87396 rows and 32 columns."""

#we shall check the removal of duplicate values.
main_df.duplicated().sum()

"""## Missing Values/Null Values"""

# Missing Values/Null Values Count
null_counts = main_df.isnull().sum()
null_counts

"""- In this, we have found that 4 columns have null values and in which the 'company' and 'agent' have highest null values. So that, we are removing these columns by using of drop method.


"""

# Removing the null data
main_df = main_df.drop(columns = ['agent', 'company'])

"""- Now we will just need to remove 452 rows with the NaN values. 452 rows out of 119390 is negligible hence I will just remove.
This can be done using data.dropna(axis = 0)
"""

main_df = main_df.dropna(axis=0)

# Check to see if there are any more NaN data
main_df.isnull().sum()

"""- Now, we have  clean Data in which there is no null values present in any column so that, the analysis will be more accurate.

##Let's find out the data type of each column:
"""

#dtypes of each column
main_df.dtypes

"""- We know that the data type of children can not be a float type. So that, we need to convert it into the integer."""

#Conversion of float into integer
main_df['children'] = main_df['children'].astype('int64')
main_df['children']



"""##Lets first find the correlation between the numerical data.

- Since, columns like 'is_cancelled', 'arrival_date_year', 'arrival_date_week_number', 'arrival_date_day_of_month', 'is_repeated_guest', 'company', 'agent' are categorical data having numerical type. So we wont need to check them for correlation.


- Also, we have added total_stay and total_people columns. So, we can remove adults, children, babies, stays_in_weekend_nights, stays_in_week_nights columns.
"""

#Creating a new column 'total_people'
main_df['total_people'] = main_df['adults'] + main_df['children'] + main_df['babies']

#Creating a new column 'total_stay'
main_df['total_stay'] = main_df['stays_in_week_nights'] + main_df['stays_in_weekend_nights']

num_main_df = main_df[['lead_time','previous_cancellations','previous_bookings_not_canceled','booking_changes','days_in_waiting_list','adr','required_car_parking_spaces','total_of_special_requests', 'total_people', 'total_stay']]

#Find out the Correlation matrix
corrmat = num_main_df.corr()
f, ax = plt.subplots(figsize=(12, 7))
sns.heatmap(corrmat,annot = True,fmt='.2f', annot_kws={'size': 10},  vmax=.8, square=True);

"""- Total stay length and lead time have slight correlation. This may means that for longer hotel stays people generally plan little before the the actual arrival.

- ADR is slightly correlated with total_people, which makes sense as more no. of people means more revenue, therefore more adr.

## Type of Hotels Data
"""

#finding out the unique values in the hotel column
main_df['hotel'].unique()

#counting the number of each hotel
main_df['hotel'].value_counts()

main_df.groupby('hotel')['hotel'].count()

"""- We have found there are two types of hotel in the given dataset.
- Let's find out which type of hotel is more preferable by the Customer
"""

# Enlarging the pie chart
plt.rcParams['figure.figsize'] = 6,6

# Indexing labels. tolist() will convert the index to list for easy manipulation
labels = main_df['hotel'].value_counts().index.tolist()

# Convert value counts to list
sizes = main_df['hotel'].value_counts().tolist()

# As the name suggest, explode will determine how much each section is separated from each other
explode = (0,0.1)

# Determine colour of pie chart
colors = ['lightskyblue','yellow']

plt.pie(sizes, explode = explode, labels=labels, colors=colors, autopct='%1.1f%%',startangle=90, textprops={'fontsize': 14})

"""##What do we see here?
- It seems that a huge proportion of hotels was city hotel. Resort hotel tend to be on the expensive side and most people will just stick with city hotel.

## An overview of the number of people who booked the hotel.
"""

#For adults
main_df.groupby('hotel')['adults'].describe()

#For Children
main_df.groupby('hotel')['children'].describe()

"""- It seems that mean values for adults and children are higher. This means that resort hotels are better choice for large families.

##Overview of cancelled bookings
"""

main_df['is_canceled'] = main_df.is_canceled.replace([1,0], ['canceled', 'not_canceled'])
canceled_data = main_df['is_canceled']
sns.countplot(canceled_data)

"""##What do we see here?
- It seems that majority of the bookings were not cancelled.

##Let's find out the reason for cancelling of Hotels:-
"""

#We will find type of deposit

Type_of_deposit = main_df['deposit_type'].value_counts()
Type_of_deposit

#Using Graph for showing type of deposite

Type_of_deposit.plot(kind = 'bar', color = ['orange', 'red', 'blue'])
plt.title('Graph showing types of deposits')
plt.xlabel('Type of deposite')
plt.ylabel('No. of deposite')

"""##Find out that-
- Majority of the booking does not require deposit. That could explain why cancellation rate was actually 50% of non-cancellation rate.

##Finding out the cancelled booking in different hotel.
"""

main_df.columns.T

main_df.groupby('hotel')['is_canceled'].count()

list1 = ['is_canceled', 'hotel']
type_of_hotel_canceled = main_df[list1]
cancelled_hotel = type_of_hotel_canceled[type_of_hotel_canceled['is_canceled'] == 'canceled'].groupby(['hotel']).size().reset_index(name = 'count')
sns.barplot(data = cancelled_hotel, x = 'hotel', y = 'count').set_title('Graph showing cancellation rates in city and resort hotel')

"""##What do we see here?
- We have seen a huge proportion of cancellation from city hotel. This was expected since 3/4 of the hotel bookings belong to city hotels.

##Let's check in which year, month and day most customers are coming.
"""

list2 = ['hotel', 'arrival_date_year', 'arrival_date_month','arrival_date_day_of_month' ]
period_arrival = main_df[list2]
sns.countplot(data = period_arrival, x = 'arrival_date_year', hue = 'hotel')

#hue is defined the category of hotel

plt.figure(figsize=(20,5))

sns.countplot(data = period_arrival, x = 'arrival_date_month', hue = 'hotel', order = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
          'August', 'September', 'October', 'November', 'December']).set_title('Graph showing number of arrival per month',fontsize=20)
plt.xlabel('Month')
plt.ylabel('Count')

plt.figure(figsize=(15,5))

sns.countplot(data = period_arrival, x = 'arrival_date_day_of_month', hue = 'hotel').set_title('Graph showing number of arrival per day', fontsize = 20)

"""##So what do we see?
- Here, City hotel gets more number of bookings.
- I can see that **2016** seems to be the year where hotel booking is at its highest. We also see an increasing trend in booking around the middle of the year, with **August** being the highest. Summer ends around August, followed straight by autumn. It seems that summer period is a peak period for hotel booking.
- We do notice a roller coaster trend for the arrival day of month. Could the peaks belong to a weekend? (i.e Will people tend to book over the weekends?)
"""

sns.countplot(data = main_df, x = 'stays_in_weekend_nights').set_title('Number of stays on weekend nights', fontsize = 20)

sns.countplot(data = main_df, x = 'stays_in_week_nights' ).set_title('Number of stays on weekday night' , fontsize = 20)

"""What do we see this time?
- It seems that majority of the stays are over the **weekday's night**. Hence, it seems that whatever we saw for the chart on day of the month was random.

##Finding Values of Visitors like adults, children and babies in hotels
"""

Number_of_adult = main_df.groupby('hotel')['adults'].sum()
Number_of_adult

# Enlarging the pie chart
plt.rcParams['figure.figsize'] = 6,6

# Indexing labels. tolist() will convert the index to list for easy manipulation
labels = main_df['hotel'].value_counts().index.tolist()

# Convert value counts to list
sizes = Number_of_adult

# As the name suggest, explode will determine how much each section is separated from each other
explode = (0, 0.1)

# Determine colour of pie chart
colors = ['lightskyblue','yellow']

plt.pie(sizes, explode = explode, labels=labels, colors=colors, autopct='%1.1f%%',startangle=90, textprops={'fontsize': 14})
plt.title('Number of Adults')

Number_of_children = main_df.groupby('hotel')['children'].sum()
Number_of_children

# Enlarging the pie chart
plt.rcParams['figure.figsize'] = 6,6

# Indexing labels. tolist() will convert the index to list for easy manipulation
labels = main_df['hotel'].value_counts().index.tolist()

# Convert value counts to list
sizes = Number_of_children

# As the name suggest, explode will determine how much each section is separated from each other
explode = (0, 0.1)

# Determine colour of pie chart
colors = ['lightpink','violet']

plt.pie(sizes, explode = explode, labels=labels, colors=colors, autopct='%1.1f%%',startangle=90, textprops={'fontsize': 14})
plt.title('Number of Children')

Number_of_babies = main_df.groupby('hotel')['babies'].sum()
Number_of_babies

# Enlarging the pie chart
plt.rcParams['figure.figsize'] = 6,6

# Indexing labels. tolist() will convert the index to list for easy manipulation
labels = main_df['hotel'].value_counts().index.tolist()

# Convert value counts to list
sizes = Number_of_babies

# As the name suggest, explode will determine how much each section is separated from each other
explode = (0, 0.1)

# Determine colour of pie chart
colors = ['yellow','skyblue']

plt.pie(sizes, explode = explode, labels=labels, colors=colors, autopct='%1.1f%%',startangle=90, textprops={'fontsize': 14})
plt.title('Number of Children')
plt.title('Number of babies')

"""##What do we see here?
- It seems that majority of the visitors travel in pair. Those that travel with children have no specific preference for the type of hotel. We do see that those bringing babies along prefer resort hotels.

##Let's find out the country from where most of the customers are coming for hotel booking.
"""

# Total guest from various countries.
country_guest=main_df['country'].value_counts().reset_index().rename(columns={'index': 'country','country': 'count of guests'})[:5]

# Plotting the graph
plt.figure(figsize=(18,6))
sns.barplot(x=country_guest['country'],y=country_guest['count of guests'])
plt.xlabel('Countries')
plt.ylabel('No. of guest',fontsize=15)
plt.title("No. of guests from diffrent Countries",fontsize=15)

country_visitors = main_df[main_df['is_canceled'] == 'not_canceled'].groupby(['country']).size().reset_index(name = 'count')

# We will be using Plotly.express to plot a choropleth map. Big fan of Plotly here!
import plotly.express as px

px.choropleth(country_visitors,
                    locations = "country",
                    color= "count",
                    hover_name= "country", # column to add to hover information
                    color_continuous_scale=px.colors.sequential.Plasma,
                    title="Home country of visitors")

"""##What do we see?
- We have a huge number of visitors from western europe, namely France,UK and **Portugal** being the highest.
- We can instruct the marketing team to target people of this region.

##Finding out the market segment that is more profitable for hotel bookings.
"""

plt.figure(figsize=(12,5))
sns.countplot(data = main_df, x = 'market_segment').set_title('Types of market segment', fontsize = 20)

plt.figure(figsize=(12,5))
sns.countplot(data = main_df, x = 'distribution_channel').set_title('Types of distribution channel', fontsize = 20)

"""##What do we see here?
- Majority of the distribution channels and market segments involve **travel agencies** (online or offline).
- We can target our marketing area to be on these travel agencies website and work with them since majority of the visitors tend to reach out to them.

##Which form of distribution do customers prefer most?
"""

# Creating the table for most preferred distribution channel.
distribution_channel = main_df.groupby(["distribution_channel"])['meal'].count().sort_values(ascending = False).reset_index().rename(columns = {"distribution_channel" : "Distribution Channel", "meal" : "Count"})
distribution_channel

# Plotting the above table  graph will help reveal insights.
sns.barplot(x = "Distribution Channel", y = 'Count', data = distribution_channel)
plt.figure(figsize = (10,6))

"""- TA/TO are the customers' chosen distribution channels.
- In order to grow their business, hotels might partner with these agents and operators or promote using them as a medium.

## Which hotel has a higher rate of returning customers?
"""

# table for hotelwise total guests
total_guests = main_df.groupby(["hotel"])["is_repeated_guest"].count().reset_index().rename(columns = {"hotel" : "Hotel Type", "is_repeated_guest" : "Total Families"})

# table for hotelwise repeated guests.
df1 = main_df[main_df["is_repeated_guest"] == 1]
df_is_repeated_guest = df1.groupby(["hotel"])["is_repeated_guest"].count().reset_index().rename(columns = {"hotel" : "Hotel Type", "is_repeated_guest" : "Repeated Families"})

# Merging above tables.
repeated_guest = pd.merge(total_guests, df_is_repeated_guest, how = "left", left_on = "Hotel Type", right_on = "Hotel Type")
repeated_guest

# creating new columns for percentage of repeated families.
repeated_guest["Percentage repeated families"] = round((repeated_guest["Repeated Families"] * 100) / repeated_guest["Total Families"], 2)
repeated_guest

#graph of the repeated families table .
plt.title("customer loyalty")
sns.barplot(x = "Hotel Type", y = 'Percentage repeated families', data =repeated_guest)

"""##What do we see here
- We found that Resort hotes has more percantage of loyal customers as compared to the City hotel.

##Which type of Hotel generates more average revenue?
"""

#Lets first group the hotel
grouped_by_hotel = main_df.groupby('hotel')
# calculating the average adr
hotel_revenue = grouped_by_hotel['adr'].agg(np.mean).reset_index().rename(columns = {'adr':'avg_adr'})
plt.figure(figsize = (9,6))
avg = sns.barplot(x = hotel_revenue['hotel'], y = hotel_revenue['avg_adr'], palette ="Set2" )
avg.set_title("Average revenue generated by hotels")
plt.show()

"""##What we found that-
- According to the above figure,  **City hotel** has more average revenue than resort hotel

##Which room type has the highest average daily rate?
"""

main_df['assigned_room_type'].unique()

plt.figure(figsize =(14,5))
group_by_room = main_df.groupby('assigned_room_type')
main_df["Number_of_booking"] = group_by_room.size()
adr = sns.barplot(x = main_df['assigned_room_type'],y = main_df["adr"])
adr.set_title("ADR based on room type",fontsize = 20)

"""H type has the highest Average daily rate followed by G type
and F type

##Find out, does waiting timing effect on hotel booking?
"""

waiting_bookings = main_df[main_df['days_in_waiting_list'] !=0]  # Selecting bookings with non zero waiting time

fig, axes = plt.subplots(1, 2, figsize=(18, 8))
sns.kdeplot(ax=axes[0],x = 'days_in_waiting_list', hue = 'is_canceled' , data = waiting_bookings)
sns.kdeplot(ax = axes[1], x = main_df['lead_time'], hue = main_df['is_canceled'])
plt.show()

"""- We see that most of the bookings that are cancelled have waiting period of less 150 days but also most of bookings that are not cancelled also have waiting period less than **150 days**. Hence this shows that waiting period has **no effect** on cancellation of bookings.

- Also, lead time has **no affect** on cancellation of bookings, as both curves of cancelation and not cancelation are similar for lead time too.

- Now we will check whether not getting allotted the same room type as demanded is the cause of cancellation fo bookings

##Now let's check the revenue pattern across months
"""

#reindexing the month
reindex = ['January', 'February','March','April','May','June','July','August','September','October','November','December']

#Categorized the month in the proper order
main_df['arrival_date_month'] = pd.Categorical(main_df['arrival_date_month'],categories=reindex,ordered=True)

#Plot the box-plot for the revenue
plt.figure(figsize = (15,8))
sns.boxplot(x = main_df['arrival_date_month'],y = main_df['adr'])
plt.show()

"""- Here, we observe that there are some outlier in the data which is affecting our analysis.
- For the better analysis we need to remove it.
"""

plt.figure(figsize = (15,8))

# Removing the outlier
main_df = main_df[main_df['adr']<4000]
sns.boxplot(x = main_df['arrival_date_month'],y = main_df['adr'])
plt.show()

"""- Avg adr rises from beginning of year upto middle of year and reaches peak at **August** and then lowers to the end of year. But hotels do make some good deals with high adr at **end of year** also.

# **Conclusion**
With this whole analysis we found the following points:
- Resort hotels are more expensive compared to the City hotels. A huge portion of the hotels is **City hotel**.
- We observed that the high rate of cancellations is due to **'no deposit' policy**.
- It seems that majority of the visitors who travel in pair, prefer City hotels.
- In the year **2016**, highest hotel bookings were registered.
- In the month, **July** to **August** highest hotel bookings were found.
- It seems that majority of the stays are over the **weekday's night**.
- Resort hotels are better choice for **large families**.
- In the hotel bookings we have found that a huge number of visitors are coming from western europe, namely France, UK and **Portugal** are among the highest.
- Majority of the distribution channels and market segments involve **travel agencies** (online or offline).
- We need to focus on that customers who visited first time in the hotel but not booking the hotel again.
- The more revenue is generated by the **City hotels**.
- **H-type** rooms produces more ADR as compared to the other room types.
- Longer waiting period does not affect on the cancellation of hotel booking.
- Highest revenue is in the month of **August** and in the **end of the year** also generating more revenue.

**The key is, knowing what to include, and what not to include in the hotel business plan. Create a clear road map for success.**
"""